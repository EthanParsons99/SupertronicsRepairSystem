@model SupertronicsRepairSystem.Models.RepairJob
@{
    ViewData["Title"] = "Repair Job Details";
}

<div class="container-fluid p-4">
    <!-- Page header -->
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h2 class="mb-0" style="color: var(--heading-text); font-weight: 700;">Repair Job Details</h2>
            <!-- Back button -->
            <a href="/Owner/RepairJobs" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to Jobs
            </a>
        </div>
    </div>

    @if (Model != null)
    {
        <!-- Job overview card -->
        <div class="card mb-3">
            <div class="card-header">
                <div class="row align-items-center">
                    <!-- Job ID -->
                    <div class="col-md-6">
                        <h5 class="mb-0">
                            <i class="bi bi-wrench-adjustable"></i> Job #@(Model.Id?.Substring(0, Math.Min(8, Model.Id?.Length ?? 0)))
                        </h5>
                    </div>
                    <!-- Status badge -->
                    <div class="col-md-6 text-end">
                        @{
                            string status = Model.Status ?? "Unknown";
                            string badgeClass = "bg-secondary";

                            if (status == "Completed")
                            {
                                badgeClass = "badge-completed";
                            }
                            else if (status == "In Progress")
                            {
                                badgeClass = "badge-in-progress";
                            }
                            else if (status == "Pending")
                            {
                                badgeClass = "badge-pending";
                            }
                            else if (status == "Cancelled")
                            {
                                badgeClass = "badge-cancelled";
                            }
                        }
                        <span class="badge @badgeClass" style="font-size: 1rem;">@status</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Device information -->
                    <div class="col-md-6">
                        <h6 style="color: var(--link-text); font-weight: 600; margin-bottom: 1rem;">Device Information</h6>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <td style="width: 150px; color: var(--secondary-text);"><strong>Item Model:</strong></td>
                                <td style="color: var(--body-text);">@(Model.ItemModel ?? "N/A")</td>
                            </tr>
                            <tr>
                                <td style="color: var(--secondary-text);"><strong>Serial Number:</strong></td>
                                <td style="color: var(--body-text);">@(Model.SerialNumber ?? "N/A")</td>
                            </tr>
                        </table>
                    </div>
                    <!-- Customer information -->
                    <div class="col-md-6">
                        <h6 style="color: var(--link-text); font-weight: 600; margin-bottom: 1rem;">Customer Information</h6>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <td style="width: 150px; color: var(--secondary-text);"><strong>Name:</strong></td>
                                <td style="color: var(--body-text);">@(Model.CustomerName ?? "Unknown")</td>
                            </tr>
                            <tr>
                                <td style="color: var(--secondary-text);"><strong>Customer ID:</strong></td>
                                <td style="color: var(--body-text);">@(Model.CustomerId ?? "N/A")</td>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="row mt-3">
                    <!-- Timeline -->
                    <div class="col-md-6">
                        <h6 style="color: var(--link-text); font-weight: 600; margin-bottom: 1rem;">Timeline</h6>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <td style="width: 150px; color: var(--secondary-text);"><strong>Date Received:</strong></td>
                                <td style="color: var(--body-text);">
                                    @try
                                    {
                                        if (Model.DateReceived != null)
                                        {
                                            @Model.DateReceived.ToDateTime().ToString("MMMM dd, yyyy 'at' HH:mm")
                                        }
                                        else
                                        {
                                            <text>N/A</text>
                                        }
                                    }
                                    catch
                                    {
                                        <text>N/A</text>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td style="color: var(--secondary-text);"><strong>Last Updated:</strong></td>
                                <td style="color: var(--body-text);">
                                    @try
                                    {
                                        if (Model.LastUpdated != null)
                                        {
                                            @Model.LastUpdated.ToDateTime().ToString("MMMM dd, yyyy 'at' HH:mm")
                                        }
                                        else
                                        {
                                            <text>N/A</text>
                                        }
                                    }
                                    catch
                                    {
                                        <text>N/A</text>
                                    }
                                </td>
                            </tr>
                        </table>
                    </div>
                    <!-- Problem description -->
                    <div class="col-md-6">
                        <h6 style="color: var(--link-text); font-weight: 600; margin-bottom: 1rem;">Problem Description</h6>
                        <div style="background: var(--subtle-gray); padding: 1rem; border-radius: 0.5rem; border-left: 4px solid var(--primary-blue); color: var(--body-text);">
                            @(Model.ProblemDescription ?? "No description provided")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quotes section -->
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-file-text"></i> Quotes (@(Model.Quotes?.Count ?? 0))
                </h5>
            </div>
            <div class="card-body p-0">
                @if (Model.Quotes != null && Model.Quotes.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Quote ID</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var quote in Model.Quotes)
                                {
                                    <tr>
                                        <!-- Quote ID -->
                                        <td>@(quote.Id ?? "N/A")</td>
                                        <!-- Description using reflection -->
                                        <td>
                                            @{
                                                var descProp = quote.GetType().GetProperty("Description");
                                                var desc = descProp != null ? descProp.GetValue(quote)?.ToString() : "N/A";
                                            }
                                            @desc
                                        </td>
                                        <!-- Amount -->
                                        <td>
                                            @{
                                                var amountProp = quote.GetType().GetProperty("Amount") ?? quote.GetType().GetProperty("TotalAmount");
                                                var amount = amountProp != null ? amountProp.GetValue(quote) : 0;
                                            }
                                            <span style="color: var(--success); font-weight: 600;">R @(Convert.ToDecimal(amount).ToString("N2"))</span>
                                        </td>
                                        <!-- Status badge -->
                                        <td>
                                            @{
                                                var statusProp = quote.GetType().GetProperty("Status");
                                                string quoteStatus = statusProp != null ? statusProp.GetValue(quote)?.ToString() ?? "Pending" : "Pending";
                                                string quoteBadgeClass = quoteStatus == "Approved" ? "badge-completed" :
                                                quoteStatus == "Rejected" ? "badge-cancelled" : "badge-pending";
                                            }
                                            <span class="badge @quoteBadgeClass">@quoteStatus</span>
                                        </td>
                                        <!-- Date -->
                                        <td>
                                            @{
                                                var dateProp = quote.GetType().GetProperty("CreatedAt") ?? quote.GetType().GetProperty("DateCreated");
                                                var dateVal = dateProp?.GetValue(quote);
                                            }
                                            @try
                                            {
                                                if (dateVal != null && dateVal.GetType().Name == "Timestamp")
                                                {
                                                    var timestamp = (Google.Cloud.Firestore.Timestamp)dateVal;
                                                    @timestamp.ToDateTime().ToString("MMM dd, yyyy")
                                                }
                                                else
                                                {
                                                    <text>N/A</text>
                                                }
                                            }
                                            catch
                                            {
                                                <text>N/A</text>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <!-- Empty state -->
                    <div class="text-center py-5">
                        <i class="bi bi-file-earmark-x" style="font-size: 3rem; color: var(--secondary-text);"></i>
                        <p style="color: var(--secondary-text); margin-top: 1rem;">No quotes available for this job</p>
                    </div>
                }
            </div>
        </div>

        <!-- Technician notes section -->
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-journal-text"></i> Technician Notes (@(Model.TechnicianNotes?.Count ?? 0))
                </h5>
            </div>
            <div class="card-body">
                @if (Model.TechnicianNotes != null && Model.TechnicianNotes.Any())
                {
                    <div class="notes-container">
                        @foreach (var note in Model.TechnicianNotes.OrderByDescending(n => n.Timestamp))
                        {
                            <!-- Note item -->
                            <div class="note-item">
                                <div class="note-header">
                                    <i class="bi bi-chat-left-text" style="color: var(--info);"></i>
                                    <small style="color: var(--secondary-text); margin-left: 0.5rem;">
                                        @try
                                        {
                                            if (note.Timestamp != null)
                                            {
                                                @note.Timestamp.ToDateTime().ToString("MMMM dd, yyyy 'at' HH:mm")
                                            }
                                            else
                                            {
                                                <text>Date unknown</text>
                                            }
                                        }
                                        catch
                                        {
                                            <text>Date unknown</text>
                                        }
                                    </small>
                                </div>
                                <div class="note-content">
                                    @(note.Content ?? "No content")
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- Empty state -->
                    <div class="text-center py-5">
                        <i class="bi bi-journal-x" style="font-size: 3rem; color: var(--secondary-text);"></i>
                        <p style="color: var(--secondary-text); margin-top: 1rem;">No technician notes available</p>
                    </div>
                }
            </div>
        </div>

        <!-- Action buttons -->
        <div class="card">
            <div class="card-body text-center">
                <button class="btn btn-primary btn-lg me-2" onclick="window.print()">
                    <i class="bi bi-printer"></i> Print Details
                </button>
                <a href="/Owner/RepairJobs" class="btn btn-secondary btn-lg">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- Not found state -->
        <div class="card" style="border-left: 4px solid var(--warning);">
            <div class="card-body text-center py-5">
                <i class="bi bi-exclamation-triangle-fill" style="font-size: 4rem; color: var(--warning);"></i>
                <h4 class="mt-3" style="color: var(--heading-text);">Repair Job Not Found</h4>
                <p style="color: var(--secondary-text);">The repair job you're looking for doesn't exist or has been removed.</p>
                <a href="/Owner/RepairJobs" class="btn btn-primary mt-3">
                    <i class="bi bi-arrow-left"></i> Back to Repair Jobs
                </a>
            </div>
        </div>
    }
</div>

<!-- Styling -->
<style>
    .notes-container {
        max-height: 400px;
        overflow-y: auto;
    }

    .note-item {
        background: var(--subtle-gray);
        border-left: 4px solid var(--info);
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 0.5rem;
        transition: var(--transition-fast);
    }

        .note-item:hover {
            box-shadow: var(--shadow-sm);
        }

    .note-header {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .note-content {
        padding-left: 1.875rem;
        color: var(--body-text);
        line-height: 1.6;
    }

    .btn-lg {
        padding: 0.875rem 2rem;
        font-size: 1.1rem;
    }
</style>

<script>
    // Apply filter logic
    function applyFilters() {
        const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
        const dateFilter = document.getElementById('dateFilter').value;
        const customerFilter = document.getElementById('customerFilter').value.toLowerCase().trim();

        const rows = document.querySelectorAll('.job-row');
        let visibleCount = 0;

        rows.forEach(row => {
            const status = (row.getAttribute('data-status') || '').toLowerCase();
            const customer = (row.getAttribute('data-customer') || '').toLowerCase();
            const date = row.getAttribute('data-date') || '';

            let showRow = true;

            // Check filters
            if (statusFilter && status !== statusFilter) {
                showRow = false;
            }

            if (dateFilter && date !== dateFilter) {
                showRow = false;
            }

            if (customerFilter && !customer.includes(customerFilter)) {
                showRow = false;
            }

            row.style.display = showRow ? '' : 'none';
            if (showRow) visibleCount++;
        });

        updateJobCount(visibleCount);
    }

    // Clear all filters
    function clearFilters() {
        document.getElementById('statusFilter').value = '';
        document.getElementById('dateFilter').value = '';
        document.getElementById('customerFilter').value = '';

        const rows = document.querySelectorAll('.job-row');
        rows.forEach(row => {
            row.style.display = '';
        });

        updateJobCount(rows.length);
    }

    // Update job count display
    function updateJobCount(count) {
        const header = document.getElementById('jobsHeader');
        const totalJobs = document.querySelectorAll('.job-row').length;
        if (count === totalJobs) {
            header.textContent = 'Active Repair Jobs (' + totalJobs + ' Total)';
        } else {
            header.textContent = 'Active Repair Jobs (' + count + ' of ' + totalJobs + ')';
        }
    }

    // Real-time search on Enter
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('customerFilter').addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });
    });
</script>