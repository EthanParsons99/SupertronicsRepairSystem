@model List<SupertronicsRepairSystem.Models.RepairJob>
@{
    ViewData["Title"] = "Repair Jobs";
}

<div class="container-fluid p-4">
    <!-- Page title -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0" style="color: var(--heading-text); font-weight: 700;">Repair Jobs</h2>
        </div>
    </div>

    <!-- Filter section -->
    <div class="card mb-4">
        <div class="card-header">
            <i class="bi bi-funnel me-2"></i>Filter Jobs
        </div>
        <div class="card-body">
            <form class="filter-form">
                <div class="row g-3 align-items-end">
                    <!-- Status filter -->
                    <div class="col-md-3">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <!-- Date filter -->
                    <div class="col-md-3">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Date</label>
                        <input type="date" class="form-control" id="dateFilter">
                    </div>
                    <!-- Customer search -->
                    <div class="col-md-3">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Customer</label>
                        <input type="text" class="form-control" id="customerFilter" placeholder="Search customer...">
                    </div>
                    <!-- Filter buttons -->
                    <div class="col-md-2">
                        <button type="button" class="btn btn-primary w-100 mb-2" onclick="applyFilters()">
                            <i class="bi bi-search"></i> Filter
                        </button>
                        <button type="button" class="btn btn-secondary w-100" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Jobs table -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0" id="jobsHeader">Active Repair Jobs (@(Model != null ? Model.Count : 0) Total)</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="repairJobsTable">
                    <thead>
                        <tr>
                            <th>Job ID</th>
                            <th>Device/Item</th>
                            <th>Customer</th>
                            <th>Problem</th>
                            <th>Status</th>
                            <th>Date Received</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            // Loop through jobs
                            @foreach (var job in Model)
                            {
                                // Format date received
                                string dateReceivedStr = "";
                                string dateReceivedDisplay = "N/A";
                                string dateReceivedTime = "";

                                try
                                {
                                    if (job.DateReceived != null)
                                    {
                                        var dt = job.DateReceived.ToDateTime();
                                        dateReceivedStr = dt.ToString("yyyy-MM-dd");
                                        dateReceivedDisplay = dt.ToString("MMM dd, yyyy");
                                        dateReceivedTime = dt.ToString("HH:mm");
                                    }
                                }
                                catch { }

                                // Format last updated
                                string lastUpdatedDisplay = "N/A";
                                string lastUpdatedTime = "";

                                try
                                {
                                    if (job.LastUpdated != null)
                                    {
                                        var dt = job.LastUpdated.ToDateTime();
                                        lastUpdatedDisplay = dt.ToString("MMM dd, yyyy");
                                        lastUpdatedTime = dt.ToString("HH:mm");
                                    }
                                }
                                catch { }

                                // Format IDs
                                string jobId = !string.IsNullOrEmpty(job.Id) && job.Id.Length >= 8 ? job.Id.Substring(0, 8) : (job.Id ?? "N/A");
                                string customerId = !string.IsNullOrEmpty(job.CustomerId) && job.CustomerId.Length >= 12 ? job.CustomerId.Substring(0, 12) : (job.CustomerId ?? "");

                                <tr class="job-row"
                                    data-status="@(job.Status ?? "")"
                                    data-customer="@(job.CustomerName ?? "")"
                                    data-date="@dateReceivedStr">
                                    <!-- Job ID -->
                                    <td>
                                        <span style="color: var(--link-text); font-weight: 600;">#@jobId</span>
                                    </td>
                                    <!-- Device info -->
                                    <td>
                                        <div style="font-weight: 600;">@(job.ItemModel ?? "N/A")</div>
                                        <small style="color: var(--secondary-text);">Serial: @(job.SerialNumber ?? "N/A")</small>
                                    </td>
                                    <!-- Customer info -->
                                    <td>
                                        <div>@(job.CustomerName ?? "Unknown")</div>
                                        @if (!string.IsNullOrEmpty(customerId))
                                        {
                                            <small style="color: var(--secondary-text);">@customerId</small>
                                        }
                                    </td>
                                    <!-- Problem description -->
                                    <td>
                                        <div class="problem-description">
                                            @if (!string.IsNullOrEmpty(job.ProblemDescription))
                                            {
                                                if (job.ProblemDescription.Length > 50)
                                                {
                                                    @(job.ProblemDescription.Substring(0, 50) + "...")
                                                }
                                                else
                                                {
                                                    @job.ProblemDescription
                                                }
                                            }
                                            else
                                            {
                                                <span style="color: var(--secondary-text);">No description</span>
                                            }
                                        </div>
                                    </td>
                                    <!-- Status badge -->
                                    <td>
                                        @{
                                            string status = job.Status ?? "Unknown";
                                            string badgeClass = "bg-secondary";

                                            if (status == "Completed")
                                            {
                                                badgeClass = "badge-completed";
                                            }
                                            else if (status == "In Progress")
                                            {
                                                badgeClass = "badge-in-progress";
                                            }
                                            else if (status == "Pending")
                                            {
                                                badgeClass = "badge-pending";
                                            }
                                            else if (status == "Cancelled")
                                            {
                                                badgeClass = "badge-cancelled";
                                            }
                                        }
                                        <span class="badge @badgeClass">@status</span>
                                    </td>
                                    <!-- Date received -->
                                    <td>
                                        <div>@dateReceivedDisplay</div>
                                        @if (!string.IsNullOrEmpty(dateReceivedTime))
                                        {
                                            <small style="color: var(--secondary-text);">@dateReceivedTime</small>
                                        }
                                    </td>
                                    <!-- Last updated -->
                                    <td>
                                        <div>@lastUpdatedDisplay</div>
                                        @if (!string.IsNullOrEmpty(lastUpdatedTime))
                                        {
                                            <small style="color: var(--secondary-text);">@lastUpdatedTime</small>
                                        }
                                    </td>
                                    <!-- View button -->
                                    <td>
                                        <a href="/Owner/RepairJobDetails/@job.Id" class="btn btn-sm btn-secondary">
                                            View
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <!-- Empty state -->
                            <tr>
                                <td colspan="8" class="text-center py-5">
                                    <i class="bi bi-inbox" style="font-size: 3rem; color: var(--secondary-text);"></i>
                                    <p class="mb-0 mt-3" style="color: var(--secondary-text);">No repair jobs found</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Styling -->
<style>
    .form-control, .form-select {
        border: 1px solid rgba(139, 155, 183, 0.3);
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        transition: var(--transition-fast);
        color: var(--body-text);
        background: var(--card-bg);
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(74, 105, 255, 0.15);
            outline: none;
        }

    .form-label {
        font-weight: 600;
        color: var(--body-text);
        margin-bottom: 0.5rem;
    }

    .problem-description {
        max-width: 200px;
        word-wrap: break-word;
        color: var(--body-text);
    }

    .table-responsive {
        max-height: 600px;
        overflow-y: auto;
    }

    .job-row {
        transition: var(--transition-fast);
    }

        .job-row:hover {
            background-color: rgba(74, 105, 255, 0.03);
        }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
</style>

<script>
    // Apply filter logic
    function applyFilters() {
        const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
        const dateFilter = document.getElementById('dateFilter').value;
        const customerFilter = document.getElementById('customerFilter').value.toLowerCase().trim();

        const rows = document.querySelectorAll('.job-row');
        let visibleCount = 0;

        rows.forEach(row => {
            const status = (row.getAttribute('data-status') || '').toLowerCase();
            const customer = (row.getAttribute('data-customer') || '').toLowerCase();
            const date = row.getAttribute('data-date') || '';

            let showRow = true;

            // Check filters
            if (statusFilter && status !== statusFilter) {
                showRow = false;
            }

            if (dateFilter && date !== dateFilter) {
                showRow = false;
            }

            if (customerFilter && !customer.includes(customerFilter)) {
                showRow = false;
            }

            row.style.display = showRow ? '' : 'none';
            if (showRow) visibleCount++;
        });

        updateJobCount(visibleCount);
    }

    // Clear all filters
    function clearFilters() {
        document.getElementById('statusFilter').value = '';
        document.getElementById('dateFilter').value = '';
        document.getElementById('customerFilter').value = '';

        const rows = document.querySelectorAll('.job-row');
        rows.forEach(row => {
            row.style.display = '';
        });

        updateJobCount(rows.length);
    }

    // Update job count display
    function updateJobCount(count) {
        const header = document.getElementById('jobsHeader');
        const totalJobs = document.querySelectorAll('.job-row').length;
        if (count === totalJobs) {
            header.textContent = 'Active Repair Jobs (' + totalJobs + ' Total)';
        } else {
            header.textContent = 'Active Repair Jobs (' + count + ' of ' + totalJobs + ')';
        }
    }

    // Real-time search on Enter
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('customerFilter').addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });
    });
</script>