@model List<SupertronicsRepairSystem.Models.RepairJob>
@{
    ViewData["Title"] = "Quotes Management";
}

<div class="container-fluid p-4">
    <!-- Page title -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0" style="color: var(--heading-text); font-weight: 700;">Quotes Management</h2>
        </div>
    </div>

    <!-- Filter section -->
    <div class="card mb-4">
        <div class="card-header">
            <i class="bi bi-funnel me-2"></i>Filter Quotes
        </div>
        <div class="card-body">
            <form id="filterForm" class="filter-form">
                <div class="row g-3 align-items-end">
                    <!-- Status filter -->
                    <div class="col-md-3">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Status</label>
                        <select class="form-select" id="statusFilter" name="status">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <!-- Customer filter -->
                    <div class="col-md-3">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Customer</label>
                        <select class="form-select" id="customerFilter" name="customerId">
                            <option value="">All Customers</option>
                            @if (Model != null && Model.Any())
                            {
                                // Get unique customers
                                var uniqueCustomers = Model
                                .GroupBy(r => r.CustomerId)
                                .Select(g => new { Id = g.Key, Name = g.First().CustomerName })
                                .OrderBy(c => c.Name);

                                foreach (var customer in uniqueCustomers)
                                {
                                    <option value="@customer.Id">@customer.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <!-- Date range filter -->
                    <div class="col-md-4">
                        <label class="form-label" style="color: var(--body-text); font-weight: 600;">Date Range</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <input type="date" class="form-control" id="startDate" name="startDate" placeholder="Start Date">
                            </div>
                            <div class="col-6">
                                <input type="date" class="form-control" id="endDate" name="endDate" placeholder="End Date">
                            </div>
                        </div>
                    </div>
                    <!-- Filter buttons -->
                    <div class="col-md-2">
                        <button type="button" class="btn btn-primary w-100 mb-2" onclick="filterQuotes()">
                            <i class="bi bi-search"></i> Filter
                        </button>
                        <button type="button" class="btn btn-secondary w-100" onclick="resetFilters()">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Quotes table -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">All Quotes (@(Model != null ? Model.Count : 0) Total)</h5>
        </div>
        <div class="card-body p-0">
            <!-- Table container for AJAX updates -->
            <div id="quotesTableContainer">
                @await Html.PartialAsync("_QuotesTable", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Filter quotes via AJAX
        function filterQuotes() {
            const form = document.getElementById('filterForm');
            const formData = new FormData(form);

            fetch('@Url.Action("FilterQuotes", "Owner")', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById('quotesTableContainer').innerHTML = html;
            })
            .catch(error => {
                console.error('Error filtering quotes:', error);
                alert('An error occurred while filtering quotes.');
            });
        }

        // Reset all filters
        function resetFilters() {
            document.getElementById('filterForm').reset();
            filterQuotes();
        }
    </script>
}

<!-- Styling -->
<style>
    .form-control, .form-select {
        border: 1px solid rgba(139, 155, 183, 0.3);
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        transition: var(--transition-fast);
        color: var(--body-text);
        background: var(--card-bg);
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(74, 105, 255, 0.15);
            outline: none;
        }

    .form-label {
        font-weight: 600;
        color: var(--body-text);
        margin-bottom: 0.5rem;
    }

    .table-responsive {
        max-height: 600px;
        overflow-y: auto;
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
</style>