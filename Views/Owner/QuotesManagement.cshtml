@model List<SupertronicsRepairSystem.Models.RepairJob>
@{
    ViewData["Title"] = "Quotes Management";
}

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0">Quotes Management</h2>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card filter-card mb-3">
        <div class="card-body">
            <h6 class="text-white mb-3">Filter Quotes</h6>
            <form id="filterForm">
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label text-white">Status</label>
                        <select class="form-select" id="statusFilter" name="status">
                            <option value="">All</option>
                            <option value="Pending">Pending</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label text-white">Customer</label>
                        <select class="form-select" id="customerFilter" name="customerId">
                            <option value="">All</option>
                            @if (Model != null && Model.Any())
                            {
                                var uniqueCustomers = Model
                                .GroupBy(r => r.CustomerId)
                                .Select(g => new { Id = g.Key, Name = g.First().CustomerName })
                                .OrderBy(c => c.Name);

                                foreach (var customer in uniqueCustomers)
                                {
                                    <option value="@customer.Id">@customer.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label text-white">Date Range</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <input type="date" class="form-control form-control-sm" id="startDate" name="startDate">
                            </div>
                            <div class="col-6">
                                <input type="date" class="form-control form-control-sm" id="endDate" name="endDate">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <button type="button" class="btn btn-primary w-100" onclick="filterQuotes()">
                            <i class="bi bi-funnel"></i> Filter
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Quotes Table -->
    <div class="card">
        <div class="card-header bg-dark text-white">
            <h5 class="mb-0">All Quotes</h5>
        </div>
        <div class="card-body p-0">
            <div id="quotesTableContainer">
                @await Html.PartialAsync("_QuotesTable", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function filterQuotes() {
            const form = document.getElementById('filterForm');
            const formData = new FormData(form);

            fetch('@Url.Action("FilterQuotes", "Owner")', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById('quotesTableContainer').innerHTML = html;
            })
            .catch(error => {
                console.error('Error filtering quotes:', error);
                alert('An error occurred while filtering quotes.');
            });
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('filterForm').reset();
            filterQuotes();
        }
    </script>
}

@*------------------------------------------------------------------------------------------------ Styling ------------------------------------------------------------------------------------------------*@

<style>
    .filter-card {
        background-color: #2C3E50;
        border-radius: 15px;
        border: none;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: none;
    }

    .card-header {
        border-radius: 10px 10px 0 0 !important;
    }

    .table-primary {
        background-color: #5865F2 !important;
        color: white;
    }

        .table-primary th {
            border: none;
            padding: 1rem;
        }

    .bg-dark {
        background-color: #2C3E50 !important;
    }

    .btn-primary {
        background-color: #5865F2;
        border-color: #5865F2;
    }

        .btn-primary:hover {
            background-color: #4752C4;
            border-color: #4752C4;
        }

    .badge.bg-info {
        background-color: #5865F2 !important;
    }

    .badge.bg-warning {
        background-color: #FFA500 !important;
    }

    .badge.bg-success {
        background-color: #28A745 !important;
    }

    .badge.bg-danger {
        background-color: #DC3545 !important;
    }

    .form-control-sm {
        font-size: 0.875rem;
    }
</style>