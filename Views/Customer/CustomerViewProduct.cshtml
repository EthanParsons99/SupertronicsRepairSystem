@model SupertronicsRepairSystem.Models.Product
@using SupertronicsRepairSystem.Models

@{
    ViewData["Title"] = Model?.Name ?? "Product Details";
    var recommendedProducts = ViewBag.RecommendedProducts as List<Product> ?? new List<Product>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Page info -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>

    <!-- Icons & Styles -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/CustomerViewProduct.css">
</head>
<body>

    <div class="content-wrap">
        <div class="container">
            @if (Model != null)
            {
                <!-- Product Detail -->
                <div class="product-section">

                    <!-- Image gallery -->
                    <div class="image-gallery">
                        <div class="main-image-container">
                            <span class="stock-badge @(Model.StockQuantity > 0 ? "in-stock" : "out-of-stock")">
                                @(Model.StockQuantity > 0 ? "In Stock" : "Out of Stock")
                            </span>
                            <div class="nav-arrow left" onclick="changeImage(-1)">‹</div>
                            <img src="@Model.ImageUrl" alt="@Model.Name" class="main-image" id="mainImage"
                                 onerror="this.src='/images/products/default-product.jpg'" />
                            <div class="nav-arrow right" onclick="changeImage(1)">›</div>
                        </div>

                        <div class="thumbnail-gallery">
                            <img src="@Model.ImageUrl" class="thumbnail active" onclick="setMainImage(this)"
                                 onerror="this.src='/images/products/default-product.jpg'" />
                            <div class="view-360" title="360° View">
                                <i class="bi bi-arrow-repeat"></i>
                            </div>
                        </div>
                    </div>

                    <!-- Product Info -->
                    <div class="product-info">
                        <h1 class="product-title">@Model.Name</h1>

                        <!-- Description -->
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <ul class="product-specs">
                                @foreach (var line in Model.Description.Split(new[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <li>@line</li>
                                }
                            </ul>
                        }

                        <div class="divider"></div>

                        <!-- Pricing -->
                        <div class="price-section">
                            @if (Model.WasPrice > Model.Price)
                            {
                                <div class="price-row">
                                    <span class="was-label">WAS</span>
                                    <span class="old-price">R @Model.WasPrice.ToString("N0")</span>
                                </div>
                            }
                            <div class="price-row">
                                <span class="now-label">NOW</span>
                                <span class="current-price">R @Model.Price.ToString("N0")</span>
                            </div>
                            @if (Model.DiscountPercentage > 0)
                            {
                                <div class="discount-badge">-@Model.DiscountPercentage%</div>
                            }
                        </div>

                        <div class="divider"></div>

                        <!-- Quantity -->
                        <div class="quantity-section">
                            <span class="quantity-label">Quantity:</span>
                            <div class="quantity-controls">
                                <button class="quantity-btn" onclick="changeQuantity(-1)" type="button">−</button>
                                <input type="number" class="quantity-value" id="quantity" value="1" min="1" max="@Model.StockQuantity" readonly />
                                <button class="quantity-btn" onclick="changeQuantity(1)" type="button">+</button>
                            </div>
                            <span class="stock-info">@Model.StockQuantity available</span>
                        </div>

                        <!-- Buttons -->
                        <div class="action-buttons">
                            <button class="btn btn-keep-aside" onclick="keepAside('@Model.Id')">
                                <i class="bi bi-bookmark"></i> Keep Aside
                            </button>
                            <button class="btn btn-add-cart" onclick="addToCartAndViewCart('@Model.Id')">
                                <i class="bi bi-cart-plus"></i> Add to Cart
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Recommended products -->
                @if (recommendedProducts.Any())
                {
                    <div class="recommendations">
                        <h2>You may also like</h2>
                        <div class="recommendation-grid">
                            @foreach (var recProduct in recommendedProducts)
                            {
                                <div class="recommendation-card">
                                    <a asp-action="CustomerViewProduct" asp-route-id="@recProduct.Id" class="product-link">
                                        <img src="@recProduct.ImageUrl" alt="@recProduct.Name"
                                             onerror="this.src='/images/products/acer.jpg'" />
                                        <h3>@recProduct.Name</h3>
                                        <div class="price">
                                            @if (recProduct.DiscountPercentage > 0)
                                            {
                                                <span class="discount-badge-small">-@recProduct.DiscountPercentage%</span>
                                            }
                                            <span class="price-value">R @recProduct.Price.ToString("N0")</span>
                                        </div>
                                    </a>
                                    <button class="btn btn-buy-now btn-small" onclick="quickAddToCart('@recProduct.Id')">
                                        <i class="bi bi-cart-plus"></i> Add to Cart
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <!-- Not found -->
                <div class="alert alert-warning text-center" style="margin: 50px 0;">
                    <i class="bi bi-exclamation-triangle" style="font-size: 48px;"></i>
                    <h3>Product not found</h3>
                    <p>The product you're looking for doesn't exist or has been removed.</p>
                    <a asp-action="Index" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> Back to Products
                    </a>
                </div>
            }
        </div>
    </div>

    <script>
        // Quantity change
        function changeQuantity(change) {
            const quantityInput = document.getElementById('quantity');
            let currentValue = parseInt(quantityInput.value);
            let maxValue = parseInt(quantityInput.max);
            let newValue = currentValue + change;
            if (newValue >= 1 && newValue <= maxValue) quantityInput.value = newValue;
        }

        // Image preview
        function setMainImage(thumbnail) {
            const mainImage = document.getElementById('mainImage');
            mainImage.src = thumbnail.src;
            document.querySelectorAll('.thumbnail').forEach(t => t.classList.remove('active'));
            thumbnail.classList.add('active');
        }

        // Change image
        function changeImage(direction) {
            const thumbnails = document.querySelectorAll('.thumbnail');
            const activeThumbnail = document.querySelector('.thumbnail.active');
            let currentIndex = Array.from(thumbnails).indexOf(activeThumbnail);
            let newIndex = currentIndex + direction;
            if (newIndex >= 0 && newIndex < thumbnails.length) setMainImage(thumbnails[newIndex]);
        }

        // Keep aside
        function keepAside(productId) {
            const quantity = document.getElementById('quantity').value;
            fetch('/CustomerDashboard/KeepAside', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId, quantity: parseInt(quantity) })
            })
            .then(r => r.json())
            .then(() => showNotification('Product kept aside!', 'success'))
            .catch(() => showNotification('Added to keep aside!', 'success'));
        }

        // Add to cart + redirect
        function addToCartAndViewCart(productId) {
            const quantity = document.getElementById('quantity').value;
            fetch('/Cart/Add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId, quantity: parseInt(quantity) })
            })
            .then(r => {
                if (!r.ok) throw new Error();
                return r.json();
            })
            .then(() => {
                showNotification('Added to cart. Redirecting...', 'success');
                setTimeout(() => window.location.href = '/Cart', 800);
            })
            .catch(() => showNotification('Could not add to cart.', 'error'));
        }

        // Quick add
        function quickAddToCart(productId, evt) {
            if (evt) { evt.preventDefault(); evt.stopPropagation(); }
            fetch('/Cart/Add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId, quantity: 1 })
            })
            .then(() => showNotification('Added to cart!', 'success'))
            .catch(() => showNotification('Added to cart!', 'success'));
        }

        // Pop-up message
        function showNotification(message, type) {
            const note = document.createElement('div');
            note.className = `notification notification-${type}`;
            note.innerHTML = `<i class="bi bi-check-circle"></i><span>${message}</span>`;
            document.body.appendChild(note);
            setTimeout(() => note.classList.add('show'), 100);
            setTimeout(() => { note.classList.remove('show'); setTimeout(() => note.remove(), 300); }, 3000);
        }
    </script>
</body>
</html>
